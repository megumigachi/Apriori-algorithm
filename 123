#ifndef GRAMMAR_SIGN_H
#define GRAMMAR_SIGN_H

#include <set>
#include <vector>
#include <stack>
#include <map>
#include <string>
#include "Translation.h"
#include "Mapping.h"

using namespace std;

extern int currentScope[MaxDepth];
extern stack<int> M;
extern stack<int> N;
extern int nextQuad;
/*
* 运行一次以求得所有的First集和Follow集
*/
void runFirst();

//符号类
class Symbol {
protected:
	set<string> first;
	set<string> follow;
	vector<vector<string>> production;

public:
	bool firstGiven{};
	bool followGiven{};
	set<string> First(const string& self);
	set<string> getFirst();
	set<string> Follow(const string& self);
	set<string> getFollow();
	vector<vector<string>> getProduction();
	virtual void translationAction(int number, Node * leftPart, vector<Node*> rightPart) { // NOLINT(performance-unnecessary-value-param)
		cerr << "called NonterminalSymbol translationAction()" << endl;
	};
};

//反射模拟
extern map<string, Symbol*> Reflect;

//终结符类
class TerminalSymbol : public Symbol {
public:
	vector<string> terminals;
	TerminalSymbol() {
		terminals = {
			"!","+","-","*","/","%","=","+=","-=","*=","/=","%=","++","--",
			"==","<>",">","<",">=","<=","&&","||",
			"{","}",",",".","[","]","(",")",";",":","?","!",
			"IF","ELSE","WHILE","DO","FOR","CONTINUE","BREAK","RETURN",
			"CHAR","INT","REAL","VOID",
			"IDENTIFIER","CONSTANT","STRING_LITERAL",
		};
	}
};

//非终结符类
class NonterminalSymbol : public Symbol {
public:
	NonterminalSymbol() {
		firstGiven = false;
		followGiven = false;
	}
};

class primary_expression : public NonterminalSymbol {
public:
	primary_expression() {
		production = {
			{ "IDENTIFIER" },
		{ "CONSTANT" },
		{ "STRING_LITERAL" },
		{ "(","expression",")" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		string name;
		switch (number) {
		case 0:
			name = getIName(rightPart.front());
			leftPart->place = FindSymbol(name, currentScope);
			if (leftPart->place == nullptr) {
				pterror(rightPart.front()->token->line, name);
				exit(0);
			}
			if (!leftPart->place->initialized) {
				setErrno(5);
				pterror(rightPart.front()->token->line, name);
				exit(0);
			}
			leftPart->which = 'i';
			break;
		case 1:
			leftPart->place = new symbol(getCValue(rightPart.front()), "const");
			leftPart->which = 'c';
			break;
		case 2:
			leftPart->place = new symbol(getSContent(rightPart.front()), "string");
			leftPart->which = 's';
			break;
		case 3:
			//向上传递
			leftPart->place = (rightPart.front()++)->place;
			leftPart->which = (rightPart.front()++)->which;
			leftPart->falseList = rightPart.front()->falseList;
			leftPart->trueList = rightPart.front()->trueList;
			break;
		default:
			cerr << "primary_expression::translationAction() error" << endl;
		}
	}
};

class postfix_expression : public NonterminalSymbol {
public:
	postfix_expression() {
		production = {
			{ "primary_expression" },
		{ "postfix_expression","[","expression","]" },
		{ "postfix_expression","(",")" },
		{ "postfix_expression","(","argument_expression_list",")" },
		{ "postfix_expression",".","IDENTIFIER" },
		{ "postfix_expression","*","IDENTIFIER" },
		{ "postfix_expression","++" },
		{ "postfix_expression","--" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		switch (number) {
		case 0:
			leftPart->place = rightPart.front()->place;
			leftPart->which = rightPart.front()->which;
			leftPart->falseList = rightPart.front()->falseList;
			leftPart->trueList = rightPart.front()->trueList;
			break;
		case 1:
			//TODO: need to be implemented
			break;
		case 2:
			//TODO: need to be implemented
			break;
		case 3:
			//TODO: need to be implemented
			break;
		case 4:
			//TODO: need to be implemented
			break;
		case 5:
			//TODO: need to be implemented
			break;
		case 6:
			leftPart->place = rightPart.front()->place;
			leftPart->which = rightPart.front()->which;
			if (leftPart->which != 'i') {
				setErrno(4);
				pterror(rightPart.back()->token->line, "++");
				exit(0);
			}
			_emit("++", leftPart->place);
			break;
		case 7:
			leftPart->place = rightPart.front()->place;
			leftPart->which = rightPart.front()->which;
			if (leftPart->which != 'i') {
				setErrno(4);
				pterror(rightPart.back()->token->line, "--");
				exit(0);
			}
			_emit("--", leftPart->place);
			break;
		default:
			cerr << "postfix_expression::translationAction() error" << endl;
		}
	}
};

class argument_expression_list : public NonterminalSymbol {
public:
	argument_expression_list() {
		production = {
			{ "assignment_expression" },
		{ "argument_expression_list",",","assignment_expression" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		//TODO
	}
};

class unary_expression : public NonterminalSymbol {
public:
	unary_expression() {
		production = {
			{ "postfix_expression" },
		{ "unary_operator","unary_expression" },
		{ "++","unary_expression" },
		{ "--","unary_expression" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		switch (number) {
		case 0:
			leftPart->place = rightPart.front()->place;
			leftPart->which = rightPart.front()->which;
			leftPart->falseList = rightPart.front()->falseList;
			leftPart->trueList = rightPart.front()->trueList;
			break;
		case 1:
			//TODO: fix type(!bool)
			//不改变原变量值的一元运算符，用临时变量保存
			leftPart->which = rightPart.back()->which;
			leftPart->place = AddTemp();
			//                switch (rightPart.back()->which) {
			//                    case 'i':
			//                        leftPart->place = AddTemp("");
			//                        break;
			//                }
			_emit({ rightPart.front()->which }, rightPart.back()->place, nullptr, leftPart->place);
			break;
		case 2:
			leftPart->place = rightPart.back()->place;
			leftPart->which = rightPart.back()->which;
			if (leftPart->which != 'i') {
				terrno = 4;
				pterror(rightPart.back()->token->line, "++");
				exit(0);
			}
			_emit("++", leftPart->place);
			break;
		case 3:
			leftPart->place = rightPart.back()->place;
			leftPart->which = rightPart.back()->which;
			if (leftPart->which != 'i') {
				terrno = 4;
				pterror(rightPart.back()->token->line, "--");
				exit(0);
			}
			_emit("--", leftPart->place);
			break;
		default:
			cerr << "unary_expression::translationAction() error" << endl;
		}
	}
};

class unary_operator :public NonterminalSymbol {
public:
	unary_operator() {
		production = {
			{ "+" },
		{ "-" },
		{ "*" },
		{ "!" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		leftPart->which = Int2Symbol(rightPart.front()->token->id)[0];
	}
};

class multiplicative_expression :public NonterminalSymbol {
public:
	multiplicative_expression() {
		production = {
			{ "unary_expression" },
		{ "multiplicative_expression","*","unary_expression" },
		{ "multiplicative_expression","/","unary_expression" },
		{ "multiplicative_expression","%","unary_expression" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		switch (number) {
		case 0:
			leftPart->place = rightPart.front()->place;
			leftPart->which = rightPart.front()->which;
			leftPart->falseList = rightPart.front()->falseList;
			leftPart->trueList = rightPart.front()->trueList;
			break;
		case 1:
			leftPart->place = AddTemp();
			leftPart->which = 'i';
			_emit("*", rightPart.front()->place, rightPart.back()->place, leftPart->place);
			break;
		case 2:
			leftPart->place = AddTemp();
			leftPart->which = 'i';
			_emit("/", rightPart.front()->place, rightPart.back()->place, leftPart->place);
			break;
		case 3:
			leftPart->place = AddTemp();
			leftPart->which = 'i';
			_emit("%", rightPart.front()->place, rightPart.back()->place, leftPart->place);
			break;
		default:
			cerr << "multiplicative_expression::translationAction() error" << endl;
		}
	}
};

class additive_expression :public NonterminalSymbol {
public:
	additive_expression() {
		production = {
			{ "multiplicative_expression" },
		{ "additive_expression","+","multiplicative_expression" },
		{ "additive_expression","-","multiplicative_expression" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		switch (number) {
		case 0:
			leftPart->place = rightPart.front()->place;
			leftPart->which = rightPart.front()->which;
			leftPart->falseList = rightPart.front()->falseList;
			leftPart->trueList = rightPart.front()->trueList;
			break;
		case 1:
			leftPart->place = AddTemp();
			leftPart->which = 'i';
			_emit("+", rightPart.front()->place, rightPart.back()->place, leftPart->place);
			break;
		case 2:
			leftPart->place = AddTemp();
			leftPart->which = 'i';
			_emit("-", rightPart.front()->place, rightPart.back()->place, leftPart->place);
			break;
		default:
			cerr << "additive_expression::translationAction() error" << endl;
		}
	}
};

class relational_expression :public NonterminalSymbol {
public:
	relational_expression() {
		production = {
			{ "additive_expression" },
		{ "relational_expression","<","additive_expression" },
		{ "relational_expression",">","additive_expression" },
		{ "relational_expression","<=","additive_expression" },
		{ "relational_expression",">=","additive_expression" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		switch (number) {
		case 0:
			leftPart->place = rightPart.front()->place;
			leftPart->which = rightPart.front()->which;
			leftPart->falseList = rightPart.front()->falseList;
			leftPart->trueList = rightPart.front()->trueList;
			break;
		case 1:
			//TODO: need which = 'b'(bool)?
			// (1<2)<3, 1<2<3 ... are invalid, both sides must be 'i' or 'c'(aka identifier or number value)
			if ((rightPart.front()->which != 'i' && rightPart.front()->which != 'c')
				|| (rightPart.back()->which != 'i' && rightPart.back()->which != 'c')) {
				setErrno(6);
				pterror(rightPart[1]->token->line, "<");
				exit(0);
			}
			leftPart->place = AddTemp();
			leftPart->which = 'b';
			//TODO: clear before insert?
			// leftPart->trueList.clear();
			leftPart->trueList.insert(nextQuad);
			leftPart->falseList.insert(nextQuad + 1);
			_emit("j<", rightPart.front()->place, rightPart.back()->place);
			_emit("j");
			break;
		case 2:
			if ((rightPart.front()->which != 'i' && rightPart.front()->which != 'c')
				|| (rightPart.back()->which != 'i' && rightPart.back()->which != 'c')) {
				setErrno(6);
				pterror(rightPart[1]->token->line, ">");
				exit(0);
			}
			leftPart->place = AddTemp();
			leftPart->which = 'b';
			// leftPart->trueList.clear();
			leftPart->trueList.insert(nextQuad);
			leftPart->falseList.insert(nextQuad + 1);
			_emit("j>", rightPart.front()->place, rightPart.back()->place);
			_emit("j");

			break;
		case 3:
			if ((rightPart.front()->which != 'i' && rightPart.front()->which != 'c')
				|| (rightPart.back()->which != 'i' && rightPart.back()->which != 'c')) {
				setErrno(6);
				pterror(rightPart[1]->token->line, "<=");
				exit(0);
			}
			leftPart->place = AddTemp();
			leftPart->which = 'b';
			// leftPart->trueList.clear();
			leftPart->trueList.insert(nextQuad);
			leftPart->falseList.insert(nextQuad + 1);
			_emit("j<=", rightPart.front()->place, rightPart.back()->place);
			_emit("j");
		case 4:
			if ((rightPart.front()->which != 'i' && rightPart.front()->which != 'c')
				|| (rightPart.back()->which != 'i' && rightPart.back()->which != 'c')) {
				setErrno(6);
				pterror(rightPart[1]->token->line, ">=");
				exit(0);
			}
			leftPart->place = AddTemp();
			leftPart->which = 'b';
			// leftPart->trueList.clear();
			leftPart->trueList.insert(nextQuad);
			leftPart->falseList.insert(nextQuad + 1);
			_emit("j>=", rightPart.front()->place, rightPart.back()->place);
			_emit("j");
		default:
			cerr << "relational_expression::translationAction() error" << endl;
		}
	}
};

class equality_expression :public NonterminalSymbol {
public:
	equality_expression() {
		production = {
			{ "relational_expression" },
		{ "equality_expression","==","relational_expression" },
		{ "equality_expression","<>","relational_expression" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		switch (number) {
		case 0:
			leftPart->place = rightPart.front()->place;
			leftPart->which = rightPart.front()->which;
			leftPart->falseList = rightPart.front()->falseList;
			leftPart->trueList = rightPart.front()->trueList;
			break;
		case 1:
			//TODO: need which = 'b'(bool)?
			// (1<2)<3, 1<2<3 ... are invalid, both sides must be 'i'(aka identifier or number value)
			if ((rightPart.front()->which != 'i' && rightPart.front()->which != 'c')
				|| (rightPart.back()->which != 'i' && rightPart.back()->which != 'c')) {
				setErrno(6);
				pterror(rightPart[1]->token->line, "==");
				exit(0);
			}
			leftPart->place = AddTemp();
			leftPart->which = 'b';
			//TODO: clear before insert?
			// leftPart->trueList.clear();
			leftPart->trueList.insert(nextQuad);
			leftPart->falseList.insert(nextQuad + 1);
			_emit("j==", rightPart.front()->place, rightPart.back()->place);
			_emit("j");
			break;
		case 2:
			if ((rightPart.front()->which != 'i' && rightPart.front()->which != 'c')
				|| (rightPart.back()->which != 'i' && rightPart.back()->which != 'c')) {
				setErrno(6);
				pterror(rightPart[1]->token->line, "<>");
				exit(0);
			}
			leftPart->place = AddTemp();
			leftPart->which = 'b';
			// leftPart->trueList.clear();
			leftPart->trueList.insert(nextQuad);
			leftPart->falseList.insert(nextQuad + 1);
			_emit("j<>", rightPart.front()->place, rightPart.back()->place);
			_emit("j");
			break;
		default:
			cerr << "equality_expression::translationAction() error" << endl;
		}
	}
};

class logical_and_expression :public NonterminalSymbol {
public:
	logical_and_expression() {
		production = {
			{ "equality_expression" },
			// l_a_e && M e_e
		{ "logical_and_expression","&&","equality_expression" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		switch (number) {
		case 0:
			leftPart->place = rightPart.front()->place;
			leftPart->which = rightPart.front()->which;
			leftPart->falseList = rightPart.front()->falseList;
			leftPart->trueList = rightPart.front()->trueList;
			break;
		case 1:
			//TODO: need which = 'b'(bool)?
			leftPart->which = 'b';
			backPatch(rightPart.front()->trueList, M.top());
			M.pop();
			leftPart->trueList = rightPart.back()->trueList;
			leftPart->falseList = merge(rightPart.front()->falseList, rightPart.back()->falseList);
			break;
		default:
			cerr << "logical_and_expression::translationAction() error" << endl;
		}
	}
};

class logical_or_expression :public NonterminalSymbol {
public:
	logical_or_expression() {
		production = {
			{ "logical_and_expression" },
			// l_o_e || M l_a_e
		{ "logical_or_expression","||","logical_and_expression" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		switch (number) {
		case 0:
			leftPart->place = rightPart.front()->place;
			leftPart->which = rightPart.front()->which;
			leftPart->falseList = rightPart.front()->falseList;
			leftPart->trueList = rightPart.front()->trueList;
			break;
		case 1:
			//TODO: need which = 'b'(bool)?
			leftPart->which = 'b';
			backPatch(rightPart.front()->falseList, M.top());
			M.pop();
			leftPart->trueList = merge(rightPart.front()->trueList, rightPart.back()->trueList);
			leftPart->falseList = rightPart.back()->falseList;
			break;
		default:
			cerr << "logical_or_expression::translationAction() error" << endl;
		}
	}
};

class conditional_expression :public NonterminalSymbol {
public:
	conditional_expression() {
		production = {
			{ "logical_or_expression" },
		{ "logical_or_expression","?","expression",":","conditional_expression" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		switch (number) {
		case 0:
			leftPart->place = rightPart.front()->place;
			leftPart->which = rightPart.front()->which;
			leftPart->falseList = rightPart.front()->falseList;
			leftPart->trueList = rightPart.front()->trueList;
			break;
		case 1:
			//TODO: not necessary (give up)

			break;
		default:
			cerr << "conditional_expression::translationAction() error" << endl;
		}
	}
};

class assignment_expression :public NonterminalSymbol {
public:
	assignment_expression() {
		production = {
			{ "conditional_expression" },
		{ "unary_expression","assignment_operator","assignment_expression" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		switch (number) {
		case 0:
			leftPart->place = rightPart.front()->place;
			leftPart->which = rightPart.front()->which;
			leftPart->falseList = rightPart.front()->falseList;
			leftPart->trueList = rightPart.front()->trueList;
			break;
		case 1:
			//TODO: need to be implemented
			break;
		default:
			cerr << "assignment_expression::translationAction() error" << endl;
		}
	}
};

class assignment_operator :public NonterminalSymbol {
public:
	assignment_operator() {
		production = {
			{ "=" },
		{ "*=" },
		{ "/=" },
		{ "%=" },
		{ "+=" },
		{ "-=" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		//TODO: need to be implemented
	}
};

class expression :public NonterminalSymbol {
public:
	expression() {
		production = {
			{ "assignment_expression" },
		{ "expression",",", "assignment_expression" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		switch (number) {
		case 0:
			leftPart->place = rightPart.front()->place;
			leftPart->which = rightPart.front()->which;
			leftPart->falseList = rightPart.front()->falseList;
			leftPart->trueList = rightPart.front()->trueList;
			break;
			//TODO: need to be implemented
		case 1:
			break;
		default:
			cerr << "expression::translationAction() error" << endl;
		}
	}
};

class declaration :public NonterminalSymbol {
public:
	declaration() {
		production = {
			{ "declaration_specifiers", ";" },
		{ "declaration_specifiers","init_declarator_list", ";" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		switch (number) {
		case 0:
			//TODO: need to be implemented. not necessary?
			break;
		case 1:
			//TODO: need to be implemented
			leftPart->place = rightPart.front()->place;
			setType(leftPart->place->type);
			break;
		default:
			cerr << "declaration::translationAction() error" << endl;
		}
	}
};

class declaration_specifiers :public NonterminalSymbol {
public:
	declaration_specifiers() {
		production = {
			{ "type_specifier" },
		{ "type_specifier", "declaration_specifiers" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		switch (number) {
		case 0:
			leftPart->place = rightPart.front()->place;
			break;
		case 1:
			//TODO: need to be implemented. not necessary?
			break;
		default:
			cerr << "declaration_specifiers::translationAction() error" << endl;
		}
	}
};

class init_declarator_list :public NonterminalSymbol {
public:
	init_declarator_list() {
		production = {
			{ "init_declarator" },
		{ "init_declarator_list",",","init_declarator" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		//fixme: no action?
	}
};

class init_declarator :public NonterminalSymbol {
public:
	init_declarator() {
		production = {
			{ "declarator" },
		{ "declarator","=","initializer" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		switch (number) {
		case 0:
			leftPart->place = rightPart.front()->place;
			leftPart->which = rightPart.front()->which;
			break;
		case 1:
			leftPart->place = rightPart.front()->place;
			leftPart->place->initialized = true;
			_emit(":=", rightPart.back()->place, nullptr, leftPart->place);
			break;
		default:
			cerr << "init_declarator::translationAction() error" << endl;
		}
	}
};

class type_specifier :public NonterminalSymbol {
public:
	type_specifier() {
		production = {
			{ "VOID" },
		{ "CHAR" },
		{ "INT" },
		{ "REAL" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		leftPart->place = new symbol("", Int2Symbol(rightPart.front()->token->id));
	}
};

class declarator :public NonterminalSymbol {
public:
	declarator() {
		production = {
			{ "pointer", "direct_declarator" },
		{ "direct_declarator" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		switch (number) {
		case 0:
			//TODO: need to be implemented
			break;
		case 1:
			//TODO: need to be implemented
			leftPart->place = rightPart.front()->place;
			break;
		default:
			cerr << "declarator::translationAction() error" << endl;
		}
	}
};

class direct_declarator :public NonterminalSymbol {
public:
	direct_declarator() {
		production = {
			{ "IDENTIFIER" },
		{ "(" ,"declarator", ")" },
		{ "direct_declarator", "[","conditional_expression", "]" },
		{ "direct_declarator", "[" ,"]" },
		{ "direct_declarator", "(" ,"parameter_list", ")" },
		{ "direct_declarator", "(" ,"identifier_list", ")" },
		{ "direct_declarator", "(", ")" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		switch (number) {
		case 0:
			if (AddSymbol(getIName(rightPart.front()), currentScope)) {
				leftPart->place = SymbolTable.back();
			}
			else {
				pterror(rightPart.front()->token->line, getIName(rightPart.front()));
			}
			break;
		case 1:
			//TODO: need to be implemented
			break;
		case 2:
			//TODO: need to be implemented
			break;
		case 3:
			//TODO: need to be implemented
			break;
		case 4:
			//TODO: need to be implemented
			break;
		case 5:
			//TODO: need to be implemented
			break;
		case 6:
			//TODO: need to be implemented
			break;
		default:
			cerr << "direct_declarator::translationAction() error" << endl;
		}
	}
};

class pointer :public NonterminalSymbol {
public:
	pointer() {
		production = {
			{ "*" },
		{ "*", "pointer" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {

	}
};


class parameter_list :public NonterminalSymbol {
public:
	parameter_list() {
		production = {
			{ "parameter_declaration" },
		{ "parameter_list", ",", "parameter_declaration" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {

	}
};

class parameter_declaration :public NonterminalSymbol {
public:
	parameter_declaration() {
		production = {
			{ "declaration_specifiers", "declarator" },
		{ "declaration_specifiers" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {

	}
};

class identifier_list :public NonterminalSymbol {
public:
	identifier_list() {
		production = {
			{ "IDENTIFIER" },
		{ "identifier_list",",","IDENTIFIER" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {

	}
};

class initializer :public NonterminalSymbol {
public:
	initializer() {
		production = {
			{ "assignment_expression" },
		{ "{" ,"initializer_lists", "}" },
		{ "{" ,"initializer_lists", ",","}" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		switch (number) {
		case 0:
			leftPart->place = rightPart.front()->place;
			break;
		case 1:
			//TODO: need to be implemented
			break;
		case 2:
			//TODO: need to be implemented
		default:
			cerr << "initializer::translationAction() error" << endl;
		}
	}
};

class initializer_lists :public NonterminalSymbol {
public:
	initializer_lists() {
		production = {
			{ "initializer" },
		{ "initializer_lists", "," ,"initializer" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {

	}
};

class statement :public NonterminalSymbol {
public:
	statement() {
		production = {
			{ "compound_statement" },
		{ "expression_statement" },
		{ "selection_statement" },
		{ "iteration_statement" },
		{ "jump_statement" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		//TODO: check it (only necessary for expression_statement?)
		leftPart->nextList = rightPart.front()->nextList;
		leftPart->trueList = rightPart.front()->trueList;
		leftPart->falseList = rightPart.front()->falseList;
		switch (number) {
		case 0:
			break;
		case 1:
			break;
		case 2:
			backPatch(leftPart->nextList, nextQuad);
			break;
		case 3:
			break;
		case 4:
			break;
		default:
			cerr << "statement::translationAction() error" << endl;
		}
	}
};

class compound_statement :public NonterminalSymbol {
public:
	compound_statement() {
		production = {
			{ "{","}" },
		{ "{","block_item_list" ,"}" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		switch (number) {
		case 0:
			//TODO: have nothing to do with empty{}?
			//leftPart->nextList.insert(nextQuad);
			//leftPart->falseList = rightPart.front()->falseList;
			//leftPart->trueList = rightPart.front()->trueList;
			break;
		case 1:
			//TODO: check insert(merge) or set(clear then insert) (or same)
			//leftPart->nextList.insert(nextQuad);
			leftPart->falseList = rightPart.front()->falseList;
			leftPart->trueList = rightPart.front()->trueList;
			break;
		default:
			cerr << "compound_statement::translationAction() error" << endl;
		}
	}
};

class block_item :public NonterminalSymbol {
public:
	block_item() {
		production = {
			{ "declaration" },
		{ "statement" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		switch (number) {
		case 0:
			//TODO: have nothing to do with declaration?
			//leftPart->nextList.insert(nextQuad);
			//leftPart->falseList = rightPart.front()->falseList;
			//leftPart->trueList = rightPart.front()->trueList;
			break;
		case 1:
			//TODO: check insert(merge) or set(clear then insert) (or same)
			//leftPart->nextList.insert(nextQuad);
			leftPart->falseList = rightPart.front()->falseList;
			leftPart->trueList = rightPart.front()->trueList;
			break;
		default:
			cerr << "block_item::translationAction() error" << endl;
		}
	}
};

class block_item_list :public NonterminalSymbol {
public:
	block_item_list() {
		production = {
			{ "block_item_list", "block_item" },
		{ "block_item" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		switch (number) {
		case 0:
			//TODO: how to handle consecutive block_item?
			// renew nextList?
			//leftPart->nextList.clear();
			//leftPart->nextList.insert(nextQuad);
			break;
		case 1:
			//TODO: check insert(merge) or set(clear then insert) (or same)
			//leftPart->nextList.insert(nextQuad);
			leftPart->falseList = rightPart.front()->falseList;
			leftPart->trueList = rightPart.front()->trueList;
			break;
		default:
			cerr << "block_item_list::translationAction() error" << endl;
		}
	}
};

class declaration_list :public NonterminalSymbol {
public:
	declaration_list() {
		production = {
			{ "declaration" },
		{ "declaration_list" ,"declaration" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {

	}
};


class expression_statement :public NonterminalSymbol {
public:
	expression_statement() {
		production = {
			{ ";" },
		{ "expression",";" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		//TODO:check it
		leftPart->nextList.insert(nextQuad);
		switch (number) {
		case 0:
			//TODO: need to be implemented
			//leftPart->nextList.insert(nextQuad);
			break;
		case 1:
			//leftPart->nextList.insert(nextQuad);
			leftPart->falseList = rightPart.front()->falseList;
			leftPart->trueList = rightPart.front()->trueList;
			break;
		default:
			cerr << "expression_statement::translationAction() error" << endl;
		}
	}
};

class selection_statement :public NonterminalSymbol {
public:
	selection_statement() {
		production = {
			// IF ( exp ) M stat
			{ "IF", "(", "expression", ")" ,"statement" },
			// IF ( exp ) M stat N else M
		{ "IF", "(", "expression", ")", "statement", "ELSE" ,"statement" }
		//{"SWITCH", "(", "expression", ")", "statement"}
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {
		switch (number) {
		case 0:
			backPatch(rightPart[2]->trueList, M.top());
			M.pop();
			leftPart->nextList = merge(rightPart[2]->falseList, rightPart[4]->nextList);
			break;
		case 1:
			backPatch(rightPart[2]->falseList, M.top());
			M.pop();
			backPatch(rightPart[2]->trueList, M.top());
			M.pop();
			leftPart->nextList = merge(rightPart[4]->nextList, rightPart[6]->nextList);
			leftPart->nextList.insert(N.top());
			N.pop();
			break;
		default:
			cerr << "selection_statement::translationAction() error" << endl;
		}
	}
};

class iteration_statement :public NonterminalSymbol {
public:
	iteration_statement() {
		production = {
			{ "WHILE", "(" ,"expression", ")", "statement" },
		{ "DO" ,"statement", "WHILE", "(" ,"expression", ")", ";" },
		{ "FOR", "(" ,"expression_statement" ,"expression_statement", ")", "statement" },
		{ "FOR", "(" ,"expression_statement", "expression_statement", "expression", ")" ,"statement" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {

	}
};

class jump_statement :public NonterminalSymbol {
public:
	jump_statement() {
		production = {
			{ "CONTINUE" ,";" },
		{ "BREAK", ";" },
		{ "RETURN", ";" },
		{ "RETURN", "expression", ";" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {

	}
};

class translation_unit :public NonterminalSymbol {
public:
	translation_unit() {
		production = {
			{ "external_declaration" },
		{ "translation_unit", "external_declaration" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {

	}
};

class external_declaration :public NonterminalSymbol {
public:
	external_declaration() {
		production = {
			{ "function_definition" },
		{ "declaration" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {

	}
};

class function_definition :public NonterminalSymbol {
public:
	function_definition() {
		production = {
			{ "declaration_specifiers","declarator","declaration_list" ,"compound_statement" },
		{ "declaration_specifiers", "declarator", "compound_statement" }
		};
	}
	void translationAction(int number, Node * leftPart, vector<Node*> rightPart) override {

	}
};

#endif //GRAMMAR_SIGN_H
